"use strict";(self.webpackChunksanchonet=self.webpackChunksanchonet||[]).push([[7133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,g=d["".concat(o,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1927:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"Register a multisignature DRep",title:"Registering a multisignature delegate representative (DRep)",sidebar_position:6.1,slug:"/tutorials/multisig-drep-registration"},s=void 0,l={unversionedId:"tutorials/register-multisig-drep",id:"tutorials/register-multisig-drep",title:"Registering a multisignature delegate representative (DRep)",description:"In certain scenarios, a Delegate Representative (DRep) may comprise multiple individuals collectively involved in decision-making processes.",source:"@site/docs/tutorials/register-multisig-drep.mdx",sourceDirName:"tutorials",slug:"/tutorials/multisig-drep-registration",permalink:"/tutorials/multisig-drep-registration",draft:!1,editUrl:"https://github.com/input-output-hk/sanchonet/tree/master/docs/tutorials/register-multisig-drep.mdx",tags:[],version:"current",sidebarPosition:6.1,frontMatter:{sidebar_label:"Register a multisignature DRep",title:"Registering a multisignature delegate representative (DRep)",sidebar_position:6.1,slug:"/tutorials/multisig-drep-registration"},sidebar:"docsSidebar",previous:{title:"Register a DRep",permalink:"/tutorials/drep-registration"},next:{title:"Delegate votes to a DRep",permalink:"/tutorials/delegate-to-drep"}},o={},c=[{value:"Pre-requisites",id:"pre-requisites",level:3},{value:"Generate SanchoNet DRep keys and an ID",id:"generate-sanchonet-drep-keys-and-an-id",level:3},{value:"Build the Native script",id:"build-the-native-script",level:3},{value:"Generate the DRep registration certificate",id:"generate-the-drep-registration-certificate",level:3},{value:"Submit the Registration certificate in a transaction",id:"submit-the-registration-certificate-in-a-transaction",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In certain scenarios, a Delegate Representative (DRep) may comprise multiple individuals collectively involved in decision-making processes.\nRegistering a multisignature DRep proves to be an optimal mechanism for such collaborative setups."),(0,i.kt)("p",null,"We can utilize Native scripts to register a multisignature DRep. In this example, we will establish a multisignature DRep composed of three sets of keys,\nwhere the endorsement of two out of the three sets is necessary. "),(0,i.kt)("h3",{id:"pre-requisites"},"Pre-requisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Payment address with funds"),(0,i.kt)("li",{parentName:"ul"},"A SanchoNet node")),(0,i.kt)("h3",{id:"generate-sanchonet-drep-keys-and-an-id"},"Generate SanchoNet DRep keys and an ID"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Each individual member of the DRep must generate a DRep key pair and calculate its verification key hash (a DRep ID). Later on we will\nuse the key hashes to build the Native script. ")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Generate a DRep key pair:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway governance drep key-gen \\\n--verification-key-file drep1.vkey \\\n--signing-key-file drep1.skey\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "DRepSigningKey_ed25519",\n    "description": "Delegate Representative Signing Key",\n    "cborHex": "5820eba7053fdc9cb3b8aacf142d3d4ad575bb48fb92f4082d81605ac8e2ccfead5d"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "DRepVerificationKey_ed25519",\n    "description": "Delegate Representative Verification Key",\n    "cborHex": "5820c19e0e939609531cfd04dcfa5bf1a5f3e245aa88e163759341aba296af34cc7e"\n}\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},'Get the DRep ID (verification key hash) in "hex" format:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway governance drep id \\\n--drep-verification-key-file drep1.vkey \\\n--output-format hex \\\n--out-file drep1.id\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cat drep1.id\ne6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c\n")),(0,i.kt)("h3",{id:"build-the-native-script"},"Build the Native script"),(0,i.kt)("p",null,"Multi-signature scripts can be written using JSON syntax. This is the format that the ",(0,i.kt)("inlineCode",{parentName:"p"},"cardano-cli")," tool accepts. In this example we want the script\nto evaluate to ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if and only if ",(0,i.kt)("strong",{parentName:"p"},"at least two valid sigantures are present"),", this is captured by the fields ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"required"),". "),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Use a text editor to build your script, let's name it ",(0,i.kt)("inlineCode",{parentName:"li"},"drep-multisig.json"),": ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "atLeast",\n  "required": 2,\n  "scripts": [\n    {\n      "type": "sig",\n      "keyHash": "e6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c"\n    },\n    {\n      "type": "sig",\n      "keyHash": "5ab00e8cd1142fcffc5f7a2c2e3549874afd89e26995d7686c2714d4"\n    },\n    {\n      "type": "sig",\n      "keyHash": "db5a8cbb0df0359c36541727229993b21371f834202733c9bbabc1fd"\n    }\n  ]\n}\n')),(0,i.kt)("p",null,'We can choose a different type of script, for example type "any", where the script evaluates to ',(0,i.kt)("inlineCode",{parentName:"p"},"True")," with a single valid signature from the list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "any",\n  "scripts": [\n    {\n      "type": "sig",\n      "keyHash": "e6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c"\n    },\n    {\n      "type": "sig",\n      "keyHash": "5ab00e8cd1142fcffc5f7a2c2e3549874afd89e26995d7686c2714d4"\n    },\n    {\n      "type": "sig",\n      "keyHash": "db5a8cbb0df0359c36541727229993b21371f834202733c9bbabc1fd"\n    }\n  ]\n}\n')),(0,i.kt)("p",null,'Or for a more strict setup we can use type "all", where all the signatures are required:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "all",\n  "scripts": [\n    {\n      "type": "sig",\n      "keyHash": "e6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c"\n    },\n    {\n      "type": "sig",\n      "keyHash": "5ab00e8cd1142fcffc5f7a2c2e3549874afd89e26995d7686c2714d4"\n    },\n    {\n      "type": "sig",\n      "keyHash": "db5a8cbb0df0359c36541727229993b21371f834202733c9bbabc1fd"\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"generate-the-drep-registration-certificate"},"Generate the DRep registration certificate"),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"We'll need the script hash (the DRep ID), calculate it with:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway governance hash script \\\n  --script-file drep-multisig.json \\\n  --out-file drep-multisig.id\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cat drep-multisig.id\nd862ee2eb3ce246b23ff7e1f62ae0705013e793787485cb6e1845356\n")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"Get the DRep deposit amount and store in a variable:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"drepDeposit=$(cardano-cli conway query gov-state --testnet-magic 4 | jq -r .currentPParams.dRepDeposit)\n")),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"Generate the DRep registration certificate:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'cardano-cli conway governance drep registration-certificate \\\n  --drep-script-hash "$(cat drep-multisig.id)" \\\n  --key-reg-deposit-amt "$drepDeposit" \\\n  --out-file drep-multisig-reg.cert\n')),(0,i.kt)("h3",{id:"submit-the-registration-certificate-in-a-transaction"},"Submit the Registration certificate in a transaction"),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},"Build the transaction. Note that we use ",(0,i.kt)("inlineCode",{parentName:"li"},"--witness-override 4")," because this tranaction will contain up to 4 signatures, 1 from the payment key\nand up to 3 members of the DRep.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway transaction build \\\n  --testnet-magic 4 \\\n  --tx-in $(cardano-cli conway query utxo --address $(cat payment.addr) --testnet-magic 4 --output-json | jq -r 'keys[0]') \\\n  --change-address $(cat payment.addr) \\\n  --witness-override 4 \\\n  --certificate-file drep-multisig-reg.cert \\\n  --certificate-script-file drep-multisig.json \\\n  --out-file tx.raw\n")),(0,i.kt)("ol",{start:8},(0,i.kt)("li",{parentName:"ol"},"Each member of the DRep will witness the transaction with its individual keys from step 1. In addition, we need the witness from the payment\naddress to pay for the transaction fee. ")),(0,i.kt)("p",null,"Witnessing the transaction with the payment key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway transaction witness \\\n  --testnet-magic 4 \\\n  --tx-body-file tx.raw \\\n  --signing-key-file payment.skey \\\n  --out-file payment.witness\n")),(0,i.kt)("p",null,"Witnessing the transaction with the DRep keys from each memeber:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway transaction witness \\\n  --testnet-magic 4 \\\n  --tx-body-file tx.raw \\\n  --signing-key-file drep1.skey \\\n  --out-file drep1.witness\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway transaction witness \\\n  --testnet-magic 4 \\\n  --tx-body-file tx.raw \\\n  --signing-key-file drep2.skey \\\n  --out-file drep2.witness\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway transaction witness \\\n  --testnet-magic 4 \\\n  --tx-body-file tx.raw \\\n  --signing-key-file drep3.skey \\\n  --out-file drep3.witness\n")),(0,i.kt)("ol",{start:9},(0,i.kt)("li",{parentName:"ol"},"Assemble the tranaction with all the witnesses from previous step:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli transaction assemble \\\n  --tx-body-file tx.raw \\\n  --witness-file  payment.witness \\\n  --witness-file  drep1.witness \\\n  --witness-file  drep2.witness \\\n  --witness-file  drep3.witness \\\n  --out-file tx.signed\n")),(0,i.kt)("ol",{start:10},(0,i.kt)("li",{parentName:"ol"},"Submit the transaction")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway transaction submit \\\n  --testnet-magic 4 \\\n  --tx-file tx.signed\n")),(0,i.kt)("ol",{start:11},(0,i.kt)("li",{parentName:"ol"},"Query the DRep state to confirm")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli conway query drep-state \\\n  --testnet-magic 4 \\\n  --drep-script-hash $(cat drep-multisig.id)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n    [\n        {\n            "scriptHash": "d862ee2eb3ce246b23ff7e1f62ae0705013e793787485cb6e1845356"\n        },\n        {\n            "anchor": null,\n            "deposit": 2000000,\n            "expiry": 270\n        }\n    ]\n]\n')),(0,i.kt)("p",null,"Awesome! Now, we just need to ",(0,i.kt)("a",{parentName:"p",href:"/tutorials/delegate-to-drep"},"delegate voting power to our DRep!")))}u.isMDXComponent=!0}}]);